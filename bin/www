#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mysql-concurrency:server');
var http = require('http');
const process = require('process');
const stoppable = require('stoppable');
const logger = require('../api/logger');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);
const server = stoppable(http.createServer(app));

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error('onError', 'EACCES', bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error('onError', 'EADDRINUSE', bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  logger.log('onListening', 'OK', 'Listening on ' + bind);
}

// Funcions per tancar el servidor de forma controlada
process.on('SIGINT', function onSigint() {
  //console.log(`SIGINT received, shutting down`);
  logger.log('on', 'SIGINT', `SIGINT received, shutting down`);
  app.shutdown();
});
  
process.on('SIGTERM', function onSigterm() {
  //console.log(`SIGTERM received, shutting down`);
  logger.log('on', 'SIGTERM', `SIGTERM received, shutting down`);
  app.shutdown();
});

app.shutdown = function () {
  // clean up your resources and exit
  logger.log('on', 'shutdown', `graceful shutdown express, wait ...`);
  server.close(function (err) {
    if (err) {
      logger.log('on', 'shutdown', `An error occurred while closing the server: ${err}`);
      process.exitCode = 1;
    }
    logger.log('on', 'shutdown', `closed express`);
  });
};